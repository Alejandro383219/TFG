# -*- coding: utf-8 -*-
"""TFG_ALEJANDRO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D-Rj-WknfYt-a_-ccRxLLl2Ey73JOsWB

ESTA PARTE CORRESPONDE A LA REPRESENTACIÓN DE DATOS EN DIFERIDO

Autor: Alejandro Martinez Hermoso
"""

from google.colab import files #Sentencias para subir archivos
files.upload()

import pandas as pd #Libreria pandas
df=pd.read_csv('PruebaFuenlabrada.csv')#Para leer el csv como un "DataFrame"
print(df)

#INFORMACIÓN DEL VUELO (RUTA, ALTITUD, ORIENTACIÓN Y SATÉLITES GPS VISIBLES) E INFORMACIÓN AMBIENTE (HUMEDAD, TEMPERATURA Y PRESIÓN)
import folium
import matplotlib.pyplot as plt
import pandas as pd
from folium import plugins
import numpy as np
import matplotlib.colors as mcolors

#Creamos distintas listas para cada tipo de medida que tenemos 
x=df['FechaHora']
y=df['Altitud']
y2=df['Orientacion']
y3=df['SatelitesVisibles']
Hum=df['Humedad']
Temp=df['Temperatura']
Pres=df['Presion']


#Guardamos los valores maximos y minimos
PresMax=Pres.max()
PresMin=Pres.min()
TempMax=Temp.max()
TempMin=Temp.min()
HumMax=Hum.max()
HumMin=Hum.min()
AltMax=y.max()
SatMax=y3.max()
AltMin=y[y>0].min()
SatMin=y3.min()

#Guardamos la marca temporal asociada al valor maximo y minimo de cada tipo de medida
FMaxAlt=df[df['Altitud']==AltMax]['FechaHora']
FMinAlt=df[df['Altitud']==AltMin]['FechaHora']
FMaxSat=df[df['SatelitesVisibles']==SatMax]['FechaHora']
FMinSat=df[df['SatelitesVisibles']==SatMin]['FechaHora']
FMaxHum=df[df['Humedad']==HumMax]['FechaHora']
FMinHum=df[df['Humedad']==HumMin]['FechaHora']
FMaxTemp=df[df['Temperatura']==TempMax]['FechaHora']
FMinTemp=df[df['Temperatura']==TempMin]['FechaHora']
FMaxPres=df[df['Presion']==PresMax]['FechaHora']
FMinPres=df[df['Presion']==PresMin]['FechaHora']




print("\n\n\n")
plt.figure(figsize=(30,7)) #Tamaño de la grafica
plt.plot(x,Hum,color = 'tab:blue',marker='D',linestyle = 'dotted') #Se construye la grafica
plt.title('Humedad (%)',color='tab:blue') #Titulo
plt.xlabel('Fecha y hora',color='tab:blue') #Se muestra la marca temporal asociada a cada medida
plt.xticks(rotation=90) #Se gira la marca temporal anterior 90 grados
plt.grid(True) #Se activa la rejilla
plt.show()
print("\n\n")
plt.figure(figsize=(5,3)) #Segundo tipo de grafica con los valores maximos y minimos
plt.plot(FMinHum.min(),HumMin,color = 'tab:blue',marker='D',linestyle = 'None')
plt.plot(FMaxHum.min(),HumMax,color = 'tab:blue',marker='D',linestyle = 'None')
plt.grid(True)
plt.show()
print("\n")
#Datos de valor medio, maximo y minimo
print("Humedad mínima:   (%)  ", end="")
print(HumMin)
print('Humedad máxima:   (%)  ', end="")
print(HumMax)
print('Media humedad:         ', end="")
print("{0:.2f}".format(Hum.mean())) #Dos decimales
print("\n\n\n\n\n\n")


#Misma explicacion que la anterior
plt.figure(figsize=(30,7))
plt.plot(x,Temp,color = 'tab:red',marker='+',linestyle = 'solid')
plt.title('Temperatura (ºC)',color='tab:red')
plt.xlabel('Fecha y hora',color='tab:red')
plt.xticks(rotation=90)
plt.grid(True)
plt.show()
print("\n\n")
plt.figure(figsize=(5,3))
plt.plot(FMinTemp.min(),TempMin,color = 'tab:red',marker='+',linestyle = 'None')
plt.plot(FMaxTemp.min(),TempMax,color = 'tab:red',marker='+',linestyle = 'None')
plt.grid(True)
plt.show()
print("\n")
print("Temperatura mínima:   (ºC)  ", end="")
print(TempMin)
print('Temperatura máxima:   (ºC)  ', end="")
print(TempMax)
print('Media temperatura:          ', end="")
print("{0:.2f}".format(Temp.mean()))
print("\n\n\n\n\n\n")


plt.figure(figsize=(30,7))
plt.plot(x,Pres,color = 'tab:orange',marker='x',linestyle = 'dotted')
plt.title('Presión (hPa)',color='tab:orange')
plt.xlabel('Fecha y hora',color='tab:orange')
plt.xticks(rotation=90)
plt.grid(True)
plt.show()
print("\n\n")
plt.figure(figsize=(5,3))
plt.plot(FMinPres.min(),PresMin,color = 'tab:orange',marker='x',linestyle = 'None')
plt.plot(FMaxPres.min(),PresMax,color = 'tab:orange',marker='x',linestyle = 'None')
plt.grid(True)
plt.show()
print("\n")
print("Presión mínima:   (hPa)  ", end="")
print(PresMin)
print('Presión máxima:   (hPa)  ', end="")
print(PresMax)
print('Media presion:           ', end="")
print("{0:.2f}".format(Pres.mean()))
print("\n\n\n\n\n\n")

print("\n\n\n")
plt.figure(figsize=(30,7))
plt.plot(x,y,color = 'tab:red',marker='x',linestyle = 'dotted')
plt.title('Altitud (m)',color='tab:red')
plt.xlabel('Fecha y hora',color='tab:red')
plt.xticks(rotation=90)
plt.grid(True)
plt.show()
print("\n\n")
plt.figure(figsize=(5,3))
plt.plot(FMinAlt.min(),AltMin,color = 'tab:red',marker='x',linestyle = 'None')
plt.plot(FMaxAlt.min(),AltMax,color = 'tab:red',marker='x',linestyle = 'None')
plt.grid(True)
plt.show()
print("\n")
print("Altitud mínima:   (m)  ", end="")
print(AltMin)
print('Altitud máxima:   (m)  ', end="")
print(AltMax)
print("\n\n\n\n\n\n")



plt.figure(figsize=(30,7))
plt.plot(x,y2,color = 'blueviolet',marker='+',linestyle = 'dotted')
plt.title('Orientación (deg)',color='blueviolet')
plt.xlabel('Fecha y hora',color='blueviolet')
plt.xticks(rotation=90)
plt.grid(True)
plt.ylim(0,360)
plt.show()
print("\n\n\n\n\n\n")



plt.figure(figsize=(30,7))
plt.plot(x,y3,color = 'darkslategrey',marker='.',linestyle = 'solid')
plt.title('Satélites Visibles ',color='darkslategrey')
plt.xlabel('Fecha y hora',color='darkslategrey')
plt.xticks(rotation=90)
plt.grid(True)
plt.show()
print("\n")
print("Satélites mínimos: ", end="")
print(SatMin)
print('Satélites máximos: ', end="")
print(SatMax)
print('Media satélites: ', end="")
print("{0:.2f}".format(y3.mean()))
print("\n\n\n\n\n\n")

lat=df['Latitud']
lon=df['Longitud']
Lat=lat.mean()
Lon=lon.mean()

mapa = folium.Map(location=[Lat,Lon] ,zoom_start=15) #Mapa usando la libreria folium
puntos=[]
i=1
while i<lat.size:
  puntos.append(tuple([lat[i], lon[i]])) #Lista para asociar latitud y longitud
  i+=1

folium.PolyLine(puntos, color='blue', weight=4.5, opacity=.5).add_to(mapa) #Linea que une los puntos anteiores para generar una ruta
folium.CircleMarker(location=[lat[0], lon[0]],radius=5, color="red", fill=True,fill_color="#3186cc",).add_to(mapa) #Circulo que indica el inicio
folium.CircleMarker(location=[lat[lat.size-1], lon[lat.size-1]],radius=5, color="green", fill=True,fill_color="#3186cc",).add_to(mapa) #Circulo que indica el final
mapa #Se muestra el mapa

#CO2-----------------------------------------------------------
import folium
import matplotlib.pyplot as plt
import pandas as pd
from folium import plugins
import numpy as np
from IPython.display import Image,display

#Listas con los tipos de medidas necesarios
x=df['FechaHora']
CO2=df['CO2']
lat=df['Latitud']
lon=df['Longitud']
Lat=lat.mean()
Lon=lon.mean()
CO2Max=CO2.max()
CO2Min=CO2[CO2>0].min()
FMaxCO2=df[df['CO2']==CO2Max]['FechaHora'] #Marca tempora del valor maximo
FMinCO2=df[df['CO2']==CO2Min]['FechaHora'] #Marca tempora del valor mininmo


#Misma explicacion que para el apartado anterior
plt.figure(figsize=(30,7))
plt.plot(x,CO2,color = 'tab:pink',marker='d',linestyle = 'solid')
plt.title('CO2 (ppm)',color='tab:pink')
plt.xlabel('Fecha y hora',color='tab:pink')
plt.xticks(rotation=90)
plt.grid(True)
plt.show()
print("\n\n")
plt.figure(figsize=(5,3))
plt.plot(FMinCO2.min(),CO2Min,color = 'tab:pink',marker='d',linestyle = 'None')
plt.plot(FMaxCO2.min(),CO2Max,color = 'tab:pink',marker='d',linestyle = 'None')
plt.grid(True)
plt.show()
print("\n")
print("CO2 mínimo:   (ppm)    (Mayor que cero)  ", end="")
print(CO2Min)
print('CO2 máximo:   (ppm)                      ', end="")
print(CO2Max)
print('Media CO2:                               ', end="")
print("{0:.2f}".format(CO2.mean()))
print("\n\n")

mapaCO2 = folium.Map(location=[Lat,Lon] ,zoom_start=10) #Se genera el mapa

#Se generan listas para guardar las medidas dependiendo de su valor
LatMenor800=[]
LonMenor800=[]
CO2Menor800=[]

Lat800_1200=[]
Lon800_1200=[]
CO2d800_1200=[]

Lat1200_2000=[]
Lon1200_2000=[]
CO2d1200_2000=[]

Lat2000_5000=[]
Lon2000_5000=[]
CO2d2000_5000=[]

LatMayor5000=[]
LonMayor5000=[]
CO2Mayor5000=[]

i=0
cont800=0
cont800_1200=0
cont1200_2000=0
cont2000_5000=0
cont5000=0

#Se guardan los valores en las listas anteriores atendiendo a la magnitud que tienen
while i<(CO2.size):
  if (CO2[i]<800 ):
      LatMenor800.append(lat[i])
      LonMenor800.append(lon[i])
      CO2Menor800.append(CO2[i])
      cont800+=1
  if (CO2[i]>=800 and CO2[i]<=1200):
      Lat800_1200.append(lat[i])
      Lon800_1200.append(lon[i])
      CO2d800_1200.append(CO2[i])
      cont800_1200+=1
  if (CO2[i] >1200 and CO2[i]<=2000):
      Lat1200_2000.append(lat[i])
      Lon1200_2000.append(lon[i])
      CO2d1200_2000.append(CO2[i])
      cont1200_2000+=1
  if (CO2[i] >2000 and CO2[i]<=5000):
      Lat2000_5000.append(lat[i])
      Lon2000_5000.append(lon[i])
      CO2d2000_5000.append(CO2[i])
      cont2000_5000+=1
  if (CO2[i] >5000):
      LatMayor5000.append(lat[i])
      LonMayor5000.append(lon[i])
      CO2Mayor5000.append(CO2[i])
      cont5000+=1
      
  i=i+1


#A continuacion se crean marcas de diferente color dependiendo de su valor (correspondiente a la leyenda)
j=0
while j<cont800:
  folium.Circle(location=[LatMenor800[j], LonMenor800[j]],radius=5, color="lime", fill=True,fill_color="lime",blur=0).add_to(mapaCO2)
  j=j+1

k=0
while k<cont800_1200:
  folium.Circle(location=[Lat800_1200[k], Lon800_1200[k]],radius=5, color="yellow", fill=True,fill_color="yellow",blur=0).add_to(mapaCO2)
  k=k+1

t=0
while t<cont1200_2000:
  folium.Circle(location=[Lat1200_2000[t], Lon1200_2000[t]],radius=5, color="orange", fill=True,fill_color="orange",blur=0).add_to(mapaCO2)
  t=t+1

m=0
while m<cont2000_5000:
  folium.Circle(location=[Lat2000_5000[m], Lon2000_5000[m]],radius=5, color="red", fill=True,fill_color="red",blur=0).add_to(mapaCO2)
  m=m+1

a=0
while a<cont5000:
  folium.Circle(location=[LatMayor5000[a], LonMayor5000[a]],radius=5, color="maroon", fill=True,fill_color="maroon",blur=0).add_to(mapaCO2)
  a=a+1

#Para el diagrama de sectores
labels = 'Bueno', 'Moderado', 'Alto', 'Muy Alto', 'Grave'

g=k+t+j+m+a
sizes = [j/g, k/g, t/g, m/g, a/g]
explode = (0, 0.0, 0, 0,0.1)  

fig1, ax1 = plt.subplots()
ax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',
        shadow=True, startangle=90)
ax1.axis('equal') 

plt.show()
print("\n\n\n")


puntos=[]
i=1
while i<lat.size:
  puntos.append(tuple([lat[i], lon[i]]))
  i+=1

folium.PolyLine(puntos, color='blue', weight=0.5, opacity=.5).add_to(mapaCO2) #Se genera una pequeña linea que unan los puntos para generar una ruta de forma visual
Image('CO2.png') #Imagen de la leyenda
display(Image('CO2.png'))
mapaCO2

#TVOC---------------------------------------------------------
import folium
import matplotlib.pyplot as plt
import pandas as pd
from folium import plugins
import numpy as np
import matplotlib.colors as mcolors
from IPython.display import Image,display

TVOC=df['TVOC']
lat=df['Latitud']
lon=df['Longitud']
Lat=lat.mean()
Lon=lon.mean()


Lat=lat.mean()
Lon=lon.mean()
x=df['FechaHora']
TVOCMax=TVOC.max()
TVOCMin=TVOC[TVOC>0].min()
FMaxTVOC=df[df['TVOC']==TVOCMax]['FechaHora']
FMinTVOC=df[df['TVOC']==TVOCMin]['FechaHora']



plt.figure(figsize=(30,7))
plt.plot(x,TVOC,color = 'tab:green',marker='o',linestyle = 'solid')
plt.title('TVOC',color='tab:green')
plt.xlabel('Fecha y hora',color='tab:green')
plt.xticks(rotation=90)
plt.grid(True)
plt.show()
print("\n\n")
plt.figure(figsize=(5,3))
plt.plot(FMinTVOC.min(),TVOCMin,color = 'tab:green',marker='o',linestyle = 'None')
plt.plot(FMaxTVOC.min(),TVOCMax,color = 'tab:green',marker='o',linestyle = 'None')
plt.grid(True)
plt.show()
print("\n")
print("TVOC mínimo:   (ppm)    (Mayor que cero)  ", end="")
print(TVOCMin)
print('TVOC máximo:   (ppm)                      ', end="")
print(TVOCMax)
print('Media TVOC:                               ', end="")
print("{0:.2f}".format(TVOC.mean()))
print("\n\n")



mapaTVOC = folium.Map(location=[Lat,Lon] ,zoom_start=12)


LatMenor200=[]
LonMenor200=[]
TVOCMenor200=[]

Lat200_3000=[]
Lon200_3000=[]
TVOC200_3000=[]

Lat3000_25000=[]
Lon3000_25000=[]
TVOC3000_25000=[]

LatMayor25000=[]
LonMayor25000=[]
TVOCMayor25000=[]

i=0
cont25000=0
cont200=0
cont200_3000=0
cont3000_25000=0

while i<(TVOC.size):
  if (TVOC[i]>25000 ):
      LatMayor25000.append(lat[i])
      LonMayor25000.append(lon[i])
      TVOCMayor25000.append(TVOC[i])
      cont25000+=1
  if (TVOC[i] <200):
      LatMenor200.append(lat[i])
      LonMenor200.append(lon[i])
      TVOCMenor200.append(TVOC[i])
      cont200+=1
  if (TVOC[i] >200 and TVOC[i]<3000):
      Lat200_3000.append(lat[i])
      Lon200_3000.append(lon[i])
      TVOC200_3000.append(TVOC[i])
      cont200_3000+=1
  if (TVOC[i] >3000 and TVOC[i]<25000):
      Lat3000_25000.append(lat[i])
      Lon3000_25000.append(lon[i])
      TVOC3000_25000.append(TVOC[i])
      cont3000_25000+=1
      
  i=i+1



j=0
while j<cont25000:
  folium.Circle(location=[LatMayor25000[j], LonMayor25000[j]],radius=50, color="red", fill=True,fill_color="red",blur=0).add_to(mapaTVOC)
  j=j+1

k=0
while k<cont200:
  folium.Circle(location=[LatMenor200[k], LonMenor200[k]],radius=50, color="lime", fill=True,fill_color="lime",blur=0).add_to(mapaTVOC)
  k=k+1

t=0
while t<cont200_3000:
  folium.Circle(location=[Lat200_3000[t], Lon200_3000[t]],radius=50, color="yellow", fill=True,fill_color="yellow",blur=0).add_to(mapaTVOC)
  t=t+1

m=0
while m<cont3000_25000:
  folium.Circle(location=[Lat3000_25000[m], Lon3000_25000[m]],radius=50, color="orange", fill=True,fill_color="orange",blur=0).add_to(mapaTVOC)
  m=m+1

labels = 'Bueno', 'Moderado', 'Alto', 'Grave'

g=k+t+j+m
sizes = [k/g, t/g, m/g, j/g]
explode = (0, 0, 0, 0.1)  

fig1, ax1 = plt.subplots()
ax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',
        shadow=True, startangle=90)
ax1.axis('equal') 

plt.show()
print("\n\n\n")

puntos=[]
i=1
while i<lat.size:
  puntos.append(tuple([lat[i], lon[i]]))
  i+=1

folium.PolyLine(puntos, color='blue', weight=0.5, opacity=.5).add_to(mapaTVOC)
Image('TVOC.png')
display(Image('TVOC.png'))
folium.LayerControl().add_to(mapaTVOC)
mapaTVOC

#PM10-------------------------------------------------
import folium
import matplotlib.pyplot as plt
import pandas as pd
from folium import plugins
import numpy as np
import matplotlib.colors as mcolors
from IPython.display import Image,display

x=df['FechaHora']
PM10=df['PM10']
lat=df['Latitud']
lon=df['Longitud']



Lat=lat.mean()
Lon=lon.mean()
PM10Max=PM10.max()
PM10Min=PM10[PM10>0].min()
FMaxPM10=df[df['PM10']==PM10Max]['FechaHora']
FMinPM10=df[df['PM10']==PM10Min]['FechaHora']
plt.figure(figsize=(30,7))
plt.plot( x, PM10, 'g^',linestyle = 'solid')
plt.xticks(rotation=90)
plt.title('PM10',color='tab:red')
plt.xlabel('Fecha y hora',color='tab:red')
plt.grid(True)
plt.show()
print("\n")
print("PM 10 mínimas:    (ug/m^3)    (Mayor que cero)  ", end="")
print(PM10Min)
print('PM 10 máximas:    (ug/m^3)                      ', end="")
print(PM10Max)
print('Media PM 10:                                    ', end="")
print("{0:.2f}".format(PM10.mean()))
print("\n\n")

mapaPM10 = folium.Map(location=[Lat,Lon] ,zoom_start=15)

LatMenor20=[]
LonMenor20=[]
PM10Menor20=[]


Lat20_40=[]
Lon20_40=[]
PM10d20_40=[]


Lat40_50=[]
Lon40_50=[]
PM10d40_50=[]


Lat50_100=[]
Lon50_100=[]
PM10d50_100=[]


Lat100_150=[]
Lon100_150=[]
PM10d100_150=[]


LatMayor150=[]
LonMayor150=[]
PM10Mayor150=[]



i=0
cont20=0
cont20_40=0
cont40_50=0
cont50_100=0
cont100_150=0
cont150=0

while i<(PM10.size):
  if (PM10[i]<20 ):
      LatMenor20.append(lat[i])
      LonMenor20.append(lon[i])
      PM10Menor20.append(PM10[i])
      cont20+=1
  if (PM10[i]<=40 and PM10[i]>=20):
      Lat20_40.append(lat[i])
      Lon20_40.append(lon[i])
      PM10d20_40.append(PM10[i])
      cont20_40+=1
  if (PM10[i]>40 and PM10[i]<=50):
      Lat40_50.append(lat[i])
      Lon40_50.append(lon[i])
      PM10d40_50.append(PM10[i])
      cont40_50+=1
  if (PM10[i]>50 and PM10[i]<=100):
      Lat50_100.append(lat[i])
      Lon50_100.append(lon[i])
      PM10d50_100.append(PM10[i])
      cont50_100+=1
  if (PM10[i]>100 and PM10[i]<=150):
      Lat100_150.append(lat[i])
      Lon100_150.append(lon[i])
      PM10d100_150.append(PM10[i])
      cont100_150+=1
  if (PM10[i]>150):
      Lat150.append(lat[i])
      Lon150.append(lon[i])
      PM10d150.append(PM10[i])
      cont150+=1
      
  i=i+1



j=0
while j<cont20:
  folium.Circle(location=[LatMenor20[j], LonMenor20[j]],radius=5, color="lime", fill=True,fill_color="lime",blur=0).add_to(mapaPM10)
  j=j+1

k=0
while k<cont20_40:
  folium.Circle(location=[Lat20_40[k], Lon20_40[k]],radius=5, color="green", fill=True,fill_color="green",blur=0).add_to(mapaPM10)
  k=k+1

t=0
while t<cont40_50:
  folium.Circle(location=[Lat40_50[t], Lon40_50[t]],radius=5, color="yellow", fill=True,fill_color="yellow",blur=0).add_to(mapaPM10)
  t=t+1

m=0
while m<cont50_100:
  folium.Circle(location=[Lat50_100[m], Lon50_100[m]],radius=5, color="orange", fill=True,fill_color="orange",blur=0).add_to(mapaPM10)
  m=m+1

n=0
while n<cont100_150:
  folium.Circle(location=[Lat100_150[n], Lon100_150[n]],radius=5, color="red", fill=True,fill_color="red",blur=0).add_to(mapaPM10)
  n=n+1

a=0
while a<cont150:
  folium.Circle(location=[LatMayor150[a], LonMayor150[a]],radius=5, color="maroon", fill=True,fill_color="maroon",blur=0).add_to(mapaPM10)
  a=a+1




labels = 'Bueno', 'Bajo', 'Moderado', 'Alto', 'Muy Alto', 'Grave'

g=k+t+j+m+n+a
sizes = [j/g, k/g, t/g, m/g, n/g, a/g]
explode = (0, 0, 0, 0, 0, 0.1)  

fig1, ax1 = plt.subplots()
ax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',
        shadow=True, startangle=90)
ax1.axis('equal') 
plt.show()
print("\n\n\n")

puntos=[]
i=1
while i<lat.size:
  puntos.append(tuple([lat[i], lon[i]]))
  i+=1

folium.PolyLine(puntos, color='blue', weight=0.5, opacity=.5).add_to(mapaPM10)
Image('PM10.png')
display(Image('PM10.png'))

mapaPM10

#PM2,5------------------------------------------------
import folium
import matplotlib.pyplot as plt
import pandas as pd
from folium import plugins
import numpy as np
import matplotlib.colors as mcolors
from IPython.display import Image,display

x=df['FechaHora']
PM2_5=df['PM2_5']
lat=df['Latitud']
lon=df['Longitud']
Lat=lat.mean()
Lon=lon.mean()
PM25Max=PM2_5.max()
PM25Min=PM2_5[PM2_5>0].min() #PM 2,5
FMaxPM25=df[df['PM2_5']==PM25Max]['FechaHora']
FMinPM25=df[df['PM2_5']==PM25Min]['FechaHora']


plt.figure(figsize=(30,7))
plt.plot( x, PM2_5, 'rd',linestyle = 'solid')
plt.xticks(rotation=90)
plt.title('PM2,5',color='tab:cyan')
plt.xlabel('Fecha y hora',color='tab:cyan')
plt.grid(True)
plt.show()
print("\n")
print("PM 2,5 mínimas:   (ug/m^3)    (Mayor que cero)  ", end="")
print(PM25Min)
print('PM 2,5 máximas:   (ug/m^3)                      ', end="")
print(PM25Max)
print('Media PM 2,5:                                   ', end="")
print("{0:.2f}".format(PM2_5.mean()))
print("\n\n")

mapaPM2_5 = folium.Map(location=[Lat,Lon] ,zoom_start=15)


LatMenor125=[]
LonMenor125=[]
PM2_5Menor125=[]


Lat125_25=[]
Lon125_25=[]
PM2_5d125_25=[]


Lat25_40=[]
Lon25_40=[]
PM2_5d25_40=[]


Lat40_60=[]
Lon40_60=[]
PM2_5d40_60=[]

Lat60_90=[]
Lon60_90=[]
PM2_5d60_90=[]

LatMayor90=[]
LonMayor90=[]
PM2_5Mayor90=[]



i=0
cont125=0
cont125_25=0
cont25_40=0
cont40_60=0
cont60_90=0
cont90=0

while i<(PM2_5.size):
  if (PM2_5[i]<12.5 ):
      LatMenor125.append(lat[i])
      LonMenor125.append(lon[i])
      PM2_5Menor125.append(PM2_5[i])
      cont125+=1
  if (PM2_5[i]<=25 and PM2_5[i]>=12.5):
      Lat125_25.append(lat[i])
      Lon125_25.append(lon[i])
      PM2_5d125_25.append(PM2_5[i])
      cont125_25+=1
  if (PM2_5[i]>25 and PM2_5[i]<=40):
      Lat25_40.append(lat[i])
      Lon25_40.append(lon[i])
      PM2_5d25_40.append(PM2_5[i])
      cont25_40+=1
  if (PM2_5[i]>40 and PM2_5[i]<=60):
      Lat40_60.append(lat[i])
      Lon40_60.append(lon[i])
      PM2_5d40_60.append(PM2_5[i])
      cont40_60+=1
  if (PM2_5[i]>60 and PM2_5[i]<=90):
      Lat60_90.append(lat[i])
      Lon50_90.append(lon[i])
      PM2_5d50_90.append(PM2_5[i])
      cont60_90+=1
  if (PM2_5[i]>90):
      Lat90.append(lat[i])
      Lon90.append(lon[i])
      PM2_5d90.append(PM2_5[i])
      cont90+=1
      
  i=i+1



j=0
while j<cont125:
  folium.Circle(location=[LatMenor125[j], LonMenor125[j]],radius=50, color="lime", fill=True,fill_color="lime",blur=0).add_to(mapaPM2_5)
  j=j+1

k=0
while k<cont125_25:
  folium.Circle(location=[Lat125_25[k], Lon125_25[k]],radius=50, color="green", fill=True,fill_color="green",blur=0).add_to(mapaPM2_5)
  k=k+1

t=0
while t<cont25_40:
  folium.Circle(location=[Lat25_40[t], Lon25_40[t]],radius=50, color="yellow", fill=True,fill_color="yellow",blur=0).add_to(mapaPM2_5)
  t=t+1

m=0
while m<cont40_60:
  folium.Circle(location=[Lat40_60[m], Lon40_60[m]],radius=50, color="orange", fill=True,fill_color="orange",blur=0).add_to(mapaPM2_5)
  m=m+1

n=0
while n<cont60_90:
  folium.Circle(location=[Lat60_90[n], Lon60_90[n]],radius=50, color="red", fill=True,fill_color="red",blur=0).add_to(mapaPM2_5)
  n=n+1

a=0
while a<cont90:
  folium.Circle(location=[LatMayor90[a], LonMayor90[a]],radius=50, color="maroon", fill=True,fill_color="maroon",blur=0).add_to(mapaPM2_5)
  a=a+1




labels = 'Bueno', 'Bajo', 'Moderado', 'Alto', 'Muy Alto', 'Grave'

g=k+t+j+m+n+a
sizes = [j/g, k/g, t/g, m/g, n/g, a/g]
explode = (0, 0, 0, 0, 0, 0.1)  

fig1, ax1 = plt.subplots()
ax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',
        shadow=True, startangle=90)
ax1.axis('equal') 
plt.show()
print("\n\n\n")

puntos=[]
i=1
while i<lat.size:
  puntos.append(tuple([lat[i], lon[i]]))
  i+=1

folium.PolyLine(puntos, color='blue', weight=0.5, opacity=.5).add_to(mapaPM2_5)
Image('PM2_5.png')
display(Image('PM2_5.png'))
mapaPM2_5

#PPM_CO-----------------------------------------------------------------------------
import folium
import matplotlib.pyplot as plt
import pandas as pd
from folium import plugins
import numpy as np
import matplotlib.colors as mcolors
from IPython.display import Image,display


x=df['FechaHora']
CO=df['PPM_CO']
lat=df['Latitud']
lon=df['Longitud']
Lat=lat.mean()
Lon=lon.mean()
COMax=CO.max()
COMin=CO.min()
FMaxCO=df[df['PPM_CO']==COMax]['FechaHora']
FMinCO=df[df['PPM_CO']==COMin]['FechaHora']



plt.figure(figsize=(30,7))
plt.plot(x,CO,color = 'tab:pink',marker='x',linestyle = 'solid')
plt.title('Monóxido de carbono  (ppm)',color='tab:pink')
plt.xlabel('Fecha y hora',color='tab:pink')
plt.xticks(rotation=90)
plt.grid(True)
plt.show()
print("\n\n")
plt.figure(figsize=(5,3))
plt.plot(FMinCO.min(),COMin,color = 'tab:pink',marker='x',linestyle = 'None')
plt.plot(FMaxCO.min(),COMax,color = 'tab:pink',marker='x',linestyle = 'None')
plt.grid(True)
plt.show()
print("\n")
print("Monóxido de carbono mínimo:   (ppm)  ", end="")
print(COMin)
print('Monóxido de carbono máximo:   (ppm)  ', end="")
print(COMax)
print('Media monóxido de carbono:           ', end="")
print("{0:.2f}".format(CO.mean()))
print("\n\n")
mapaCO = folium.Map(location=[Lat,Lon] ,zoom_start=15)


LatMenor2_5=[] #En mg/m3
LonMenor2_5=[]
COMenor2_5=[]

Lat2_5_5=[]
Lon2_5_5=[]
COd2_5_5=[]


LatMayor5=[]
LonMayor5=[]
COMayor5=[]

i=0
cont2_5=0
cont2_5_5=0
cont5=0

while i<(CO.size):
  if (CO[i]<2.18 ):
      LatMenor2_5.append(lat[i])
      LonMenor2_5.append(lon[i])
      COMenor2_5.append(CO[i])
      cont2_5+=1
  if (CO[i]>=2.18 and CO[i]<=4.37):
      Lat2_5_5.append(lat[i])
      Lon2_5_5.append(lon[i])
      COd2_5_5.append(CO[i])
      cont2_5_5+=1
  if (CO[i] >4.37):
      LatMayor5.append(lat[i])
      LonMayor5.append(lon[i])
      COMayor5.append(CO[i])
      cont5+=1
      
  i=i+1



j=0
while j<cont2_5:
  folium.Circle(location=[LatMenor2_5[j], LonMenor2_5[j]],radius=50, color="lime", fill=True,fill_color="lime",blur=0).add_to(mapaCO)
  j=j+1

k=0
while k<cont2_5_5:
  folium.Circle(location=[Lat2_5_5[k], Lon2_5_5[k]],radius=50, color="yellow", fill=True,fill_color="yellow",blur=0).add_to(mapaCO)
  k=k+1


a=0
while a<cont5:
  folium.Circle(location=[LatMayor5[a], LonMayor5[a]],radius=50, color="maroon", fill=True,fill_color="maroon",blur=0).add_to(mapaCO)
  a=a+1

labels = 'Intermedio', 'Bajo', 'Alto'

g=j+k+a
sizes = [k/g, j/g, a/g]
explode = (0, 0, 0.1 )  

fig1, ax1 = plt.subplots()
ax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',
        shadow=True, startangle=90)
ax1.axis('equal') 

plt.show()
print("\n\n\n")

puntos=[]
i=1
while i<lat.size:
  puntos.append(tuple([lat[i], lon[i]]))
  i+=1

folium.PolyLine(puntos, color='blue', weight=0.5, opacity=.5).add_to(mapaCO)
Image('CO.png')
display(Image('CO.png'))
mapaCO

#PPM_GLP------------------------------------------------------
import folium
import matplotlib.pyplot as plt
import pandas as pd
from folium import plugins
import numpy as np
from IPython.display import Image,display


x=df['FechaHora']
GLP=df['PPM_GLP']
lat=df['Latitud']
lon=df['Longitud']

GLPMax=GLP.max()
GLPMin=GLP.min()
FMaxGLP=df[df['PPM_GLP']==GLPMax]['FechaHora']
FMinGLP=df[df['PPM_GLP']==GLPMin]['FechaHora']

Lat=lat.mean()
Lon=lon.mean()



plt.figure(figsize=(30,7))
plt.plot(x,GLP,color = 'tab:purple',marker='D',linestyle = 'solid')
plt.title('GLP   (ppm)',color='tab:purple')
plt.xlabel('Fecha y hora',color='tab:purple')
plt.xticks(rotation=90)
plt.grid(True)
plt.show()
print("\n\n")
plt.figure(figsize=(5,3))
plt.plot(FMinGLP.min(),GLPMin,color = 'tab:purple',marker='D',linestyle = 'None')
plt.plot(FMaxGLP.min(),GLPMax,color = 'tab:purple',marker='D',linestyle = 'None')
plt.grid(True)
plt.show()
print("\n")
print("GLP mínimos:   (ppm)  ", end="")
print(GLPMin)
print('GLP máximos:   (ppm)  ', end="")
print(GLPMax)
print('Media GLP:            ', end="")
print("{0:.2f}".format(GLP.mean()))
print("\n\n")
puntos=[]


mapaGLP = folium.Map(location=[Lat,Lon] ,zoom_start=10)

LatMenor70=[]
LonMenor70=[]
GLPMenor70=[]

Lat70_150=[]
Lon70_150=[]
GLPd70_150=[]


LatMayor150=[]
LonMayor150=[]
GLPMayor150=[]

i=0
cont70=0
cont70_150=0
cont150=0

while i<(GLP.size):
  if (GLP[i]<70 ):
      LatMenor70.append(lat[i])
      LonMenor70.append(lon[i])
      GLPMenor70.append(GLP[i])
      cont70+=1
  if (GLP[i]>=70 and GLP[i]<=150):
      Lat70_150.append(lat[i])
      Lon70_150.append(lon[i])
      GLPd70_150.append(GLP[i])
      cont70_150+=1
  if (GLP[i] >150):
      LatMayor150.append(lat[i])
      LonMayor150.append(lon[i])
      GLPMayor150.append(GLP[i])
      cont150+=1
      
  i=i+1



j=0
while j<cont70:
  folium.Circle(location=[LatMenor70[j], LonMenor70[j]],radius=50, color="lime", fill=True,fill_color="lime",blur=0).add_to(mapaGLP)
  j=j+1

k=0
while k<cont70_150:
  folium.Circle(location=[Lat70_150[k], Lon70_150[k]],radius=50, color="yellow", fill=True,fill_color="yellow",blur=0).add_to(mapaGLP)
  k=k+1


a=0
while a<cont150:
  folium.Circle(location=[LatMayor150[a], LonMayor150[a]],radius=50, color="maroon", fill=True,fill_color="maroon",blur=0).add_to(mapaGLP)
  a=a+1

labels = 'Intermedio', 'Bajo', 'Alto'

g=j+k+a
sizes = [k/g, j/g, a/g]
explode = (0, 0, 0.1 )  

fig1, ax1 = plt.subplots()
ax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',
        shadow=True, startangle=90)
ax1.axis('equal') 

plt.show()
print("\n\n\n")

puntos=[]
i=1
while i<lat.size:
  puntos.append(tuple([lat[i], lon[i]]))
  i+=1

folium.PolyLine(puntos, color='blue', weight=0.5, opacity=.5).add_to(mapaGLP)
Image('GLP.png')
display(Image('GLP.png'))
mapaGLP